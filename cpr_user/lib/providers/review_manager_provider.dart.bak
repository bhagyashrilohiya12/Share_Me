import 'dart:io';

import 'package:cpr_user/models/business_external_promotion.dart';
import 'package:cpr_user/models/business_internal_promotion.dart';
import 'package:cpr_user/models/business_server.dart';
import 'package:cpr_user/models/place.dart';
import 'package:cpr_user/models/review.dart';
import 'package:cpr_user/services/reviews_service.dart';
import 'package:cpr_user/services/server_service.dart';
import 'package:flutter/material.dart';

class ReviewManagerProvider with ChangeNotifier {
    Place _place;
    List<CPRBusinessServer> employees;
    CPRBusinessServer selectedEmployee;
    List<CPRBusinessInternalPromotion> promotions;
    CPRBusinessInternalPromotion selectedPromotion;
    bool usePromotion;
    Review review;
    String userId;
    bool draftLoaded = false;

    List<File> _images = [];
    List<File> _videos = [];
    List<String> removedImages = [];
    List<String> removedVideos = [];
    ReviewService reviewService = new ReviewService();
    bool busy = false;


    var firstInputController = TextEditingController();
    var secondInputController = TextEditingController();
    var thirdInputController = TextEditingController();
    var fourthInputController = TextEditingController();
    var fifthInputController = TextEditingController();
    var fullReviewController = TextEditingController();

    ReviewManagerProvider({Review rev, Place place, String userId}) {
        this.userId = userId;
        if (rev != null) {
            this.review = rev;
            _fillFieldsFromReview();
            this._place = rev.place;
        } else {
            this.review = new Review();
            if(place!=null){
                stopLoading();
                findDraftReview(place.googlePlaceID).then((s)=>{
                });
                findEmployees(place.businessOwnerEmail);
                stopLoading();
            }

            this._place = place;
        }
        if(this.review.rating==null || this.review.rating==0){
            this.review.rating = 3.0;
        }
        if(this.review.waiting==null || this.review.waiting==0){
            this.review.waiting = 3;

        }
    }

    _fillFieldsFromReview(){
        this.firstInputController.text = review.serverName;
        this.secondInputController.text = review.service;
        this.thirdInputController.text = review.reasonOfVisit;
        this.fourthInputController.text = review.companion;
        this.fifthInputController.text = review.comments;
        this.fullReviewController.text = review.fullReview;
    }

    Future<bool> findDraftReview(placeId)async{
        try{
            var result = await reviewService.findDraftReviewByUserAndPlace(placeId, userId);
            this.review = result;
            _fillFieldsFromReview();
            draftLoaded = true;
            notifyListeners();
            return true;
        }catch(e) {
            this.review = new Review();
            return false;
        }
    }


    List<File> get images => _images;
    List<File> get videos => _videos;

    String getImageUrl(String imageName) {
        if (review.downloadURLs != null && review.downloadURLs.isNotEmpty) {
            String url =
            review.downloadURLs.firstWhere((test) => test.contains(imageName));
            return url;
        }
        return '';
    }

    String getVideoUrl(String videoName) {
        if (review.videoDownloadURLs != null && review.videoDownloadURLs.isNotEmpty) {
            String url =
            review.videoDownloadURLs.firstWhere((test) => test.contains(videoName));
            return url;
        }
        return '';
    }

    bool get hasImagesInReview =>
        (review.images != null && review.images.isNotEmpty);

    bool get hasVideosInReview =>
        (review.videos != null && review.videos.isNotEmpty);

    void addImage(File file) {
        _images.add(file);
        notifyListeners();
    }

    void addVideo(File file) {
        _videos.add(file);
        notifyListeners();
    }

    void removeImage(File file) {
        _images.remove(file);
        notifyListeners();
    }

    void removeVideo(File file) {
        _videos.remove(file);
        notifyListeners();
    }

    void removeRemoteImage(String image) {
        if (review.downloadURLs != null) {
            String url = getImageUrl(image);
            review.downloadURLs.remove(url);
            review.images.remove(image);
            removedImages.add(url);
        }

        notifyListeners();
    }


    void removeRemoteVideo(String image) {
        if (review.videoDownloadURLs != null) {
            String url = getImageUrl(image);
            review.videoDownloadURLs.remove(url);
            review.videos.remove(image);
            removedVideos.add(url);
        }

        notifyListeners();
    }

    Place get place => _place;

    set place(p) {
        _place = p;
        notifyListeners();
    }

    void startLoading() {
        busy = true;
        notifyListeners();
    }

    void stopLoading() {
        busy = false;
        notifyListeners();
    }


    void findEmployees(String businessOwnerEmail) async {
        employees = await ServerService().findEmployees(businessOwnerEmail);
        notifyListeners();
    }

    @override
    void dispose() {
        super.dispose();
        firstInputController.dispose();
        secondInputController.dispose();
        thirdInputController.dispose();
        fourthInputController.dispose();
        fifthInputController.dispose();
        fullReviewController.dispose();

    }
}